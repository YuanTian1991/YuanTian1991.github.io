{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","props","state","componentDidMount","console","log","this","render","classes","data","title","allMarkdownRemark","edges","map","index","node","key","to","frontmatter","slug","style","textDecoration","elevation","className","root","my","fontWeight","fontSize","color","margin","date","tags","tag","tagIndex","abstract","React","Component","pageQuery","withStyles","theme","padding","cursor","backgroundColor","fontFamily","borderRadius"],"mappings":"6PAWMA,E,oBACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,GAFI,E,kHAMnBC,kBAAA,WACEC,QAAQC,IAAIC,KAAKL,Q,EAGnBM,OAAA,WAAU,IAAD,EACmBD,KAAKL,MAAvBO,EADD,EACCA,QAASC,EADV,EACUA,KAEjB,OACE,kBAAE,IAAF,KACE,kBAAC,IAAD,CAAKC,MAAM,SAETD,EAAKE,kBAAkBC,MAAMC,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KAClC,OACE,kBAAC,OAAD,CAAMC,IAAKF,EAAOG,GAAIF,EAAKG,YAAYC,KAAMC,MAAO,CAAEC,eAAgB,SACpE,kBAAC,IAAD,CAAOL,IAAKF,EAAOQ,UAAW,EAAGC,UAAWf,EAAQgB,MAClD,kBAAC,IAAD,CAAKC,GAAI,GAEP,wBAAIL,MAAO,CAACM,WAAY,QACrBX,EAAKG,YAAYR,MADpB,KAIA,kBAAC,IAAD,CAAaU,MAAO,CAAEM,WAAY,MAAOC,SAAU,QAASC,MAAO,OAAQC,OAAQ,YAChFd,EAAKG,YAAYY,KAEhBf,EAAKG,YAAYa,KAAKlB,KAAI,SAACmB,EAAKC,GAC9B,OACE,0BAAMjB,IAAKiB,GACR,MACD,8BAEED,QAOZ,2BACKjB,EAAKG,YAAYgB,kB,GA7ClBC,IAAMC,WAmGjBC,EAAS,aAqBNC,uBAtDD,SAAAC,GAAK,MAAK,CACvBf,KAAM,CAEJgB,QAAS,MACTX,OAAQ,QAERY,OAAQ,UACRC,gBAAiB,qBACjB,UAAW,CACTA,gBAAiB,sBAEjB,qBAAsB,gCACtB,iBAAkB,gCAClB,WAAc,kCAGlBV,IAAK,CACHW,WAAY,WACZH,QAAS,cAETI,aAAc,QACdH,OAAQ,UACR,UAAW,CACTC,gBAAiB,YAEjB,qBAAsB,gCACtB,iBAAkB,gCAClB,WAAc,qCA2BJJ,CAAmBtC","file":"component---src-pages-index-js-7f395df8add4bf4e044e.js","sourcesContent":["import React from \"react\"\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { Typography, Box, Paper } from '@material-ui/core';\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\nclass IndexPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props)\n  }\n\n  render() {\n    const { classes, data } = this.props;\n\n    return (\n      < Layout >\n        <SEO title=\"Note\" />\n        {\n          data.allMarkdownRemark.edges.map(({ node }, index) => {\n            return (\n              <Link key={index} to={node.frontmatter.slug} style={{ textDecoration: \"none\", }}>\n                <Paper key={index} elevation={0} className={classes.root}>\n                  <Box my={1}>\n                    {/* <Typography variant=\"h4\" component=\"h1\" style={{ fontWeight: \"700\" }} gutterBottom> */}\n                    <h2 style={{fontWeight: '700'}}>\n                      {node.frontmatter.title} </h2>\n                    {/* </Typography> */}\n\n                    <Typography  style={{ fontWeight: \"100\", fontSize: '0.9em', color: 'gray', margin: '0px 0px' }}>\n                      {node.frontmatter.date}\n                      {\n                        node.frontmatter.tags.map((tag, tagIndex) => {\n                          return (\n                            <span key={tagIndex}>\n                              {' | '}\n                              <span\n                              // className={classes.tag}\n                              >{tag}</span>\n                            </span>\n                          )\n                        })\n                      }\n                    </Typography>\n\n                    <p>\n                        {node.frontmatter.abstract}\n                    </p>\n\n                    {/* <Typography style={{fontWeight: '300', fontSize: '0.7em'}}>\n                      {node.frontmatter.abstract}\n                    </Typography> */}\n                  </Box>\n                </Paper>\n              </Link>\n            )\n          })\n        }\n      </Layout >\n    );\n  }\n}\n\nIndexPage.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst styles = theme => ({\n  root: {\n    // minWidth: 275,\n    padding: '1em',\n    margin: '0.5em',\n    // marginBottom: '2em',\n    cursor: 'pointer',\n    backgroundColor: 'rgba(255, 0, 0, 0)',\n    \"&:hover\": {\n      backgroundColor: 'rgba(0, 0, 0, 0.07)',\n      // backgroundColor: 'whitesmoke',\n      \"-webkit-transition\": \"background-color 100ms linear\",\n      \"-ms-transition\": \"background-color 100ms linear\",\n      \"transition\": \"background-color 100ms linear\",\n    }\n  },\n  tag: {\n    fontFamily: \"consolas\",\n    padding: '0.1em 0.5em',\n    // border: '0.5px solid lightgrey',\n    borderRadius: '0.1em',\n    cursor: 'pointer',\n    \"&:hover\": {\n      backgroundColor: \"lightgrey\",\n      // color: 'white',\n      \"-webkit-transition\": \"background-color 500ms linear\",\n      \"-ms-transition\": \"background-color 500ms linear\",\n      \"transition\": \"background-color 500ms linear\",\n    }\n  }\n});\n\n\nexport const pageQuery = graphql`\n{\n  allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___date] }\n    limit: 1000\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          slug\n          date(formatString: \"MMMM DD, YYYY\")\n          tags\n          abstract\n        }\n      }\n    }\n  }\n}\n`\n\nexport default (withStyles(styles)(IndexPage))\n"],"sourceRoot":""}