{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/JavaScript-Snippets:-Promise-for-multiple-query",
    "result": {"data":{"markdownRemark":{"html":"<p>In my GCGR project, in the backend I need to do string match for user input. For example when user type <code class=\"language-text\">L12</code>, I need to search cell line table to find all cell lines (which there are 4 tables) for cell line names. And also, I need to search expression and CNA tables for gene name. In this case, I have 6 searchs. I need to find a way to write promise when all of them done.</p>\n<h2>1. Create multiple query</h2>\n<p>In below code, I showed two ways to create query list. One if from <code class=\"language-text\">map</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> celllineTableNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"primary_gsc_line\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"primary_gsc_line_engineered\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ns_cell_lines_unmodified\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ns_cell_lines_derivatives\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> celllineSearch <span class=\"token operator\">=</span> celllineTableNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tmpTable <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">[</span>clt<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span>clt<span class=\"token punctuation\">,</span> tableSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> tmpTable<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$regex</span><span class=\"token operator\">:</span> searchContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$options</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In above code, I know the 4 table's name in MongoDB. In the map action, it will automatically create model for each table, then create a promise with <code class=\"language-text\">.find()</code> function. After above code, a \"query list\" with 4 promise can be created.</p>\n<h2>2. Append multiple query</h2>\n<p>After above code, I still have tow more queries to add. However, these two table have different structure as previous ones. Thus, I have to add them into previous query list. Like below, just <code class=\"language-text\">.push()</code> function works.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> valueTableNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tpm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cna\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    valueTableNames<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tmpTable <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">[</span>vt<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span>vt<span class=\"token punctuation\">,</span> tableSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      celllineSearch<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        tmpTable<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">GeneSymbol</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$regex</span><span class=\"token operator\">:</span> searchContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$options</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">GeneSymbol</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>3. Collect all queries</h2>\n<p>After sending queries and created query list. <code class=\"language-text\">Promise.all(celllineSearch)</code> is key step to collect them all back <strong>after they are all done</strong>. After that, <code class=\"language-text\">.then</code> and <code class=\"language-text\">.catch</code> can be used as their usual ways.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>celllineSearch<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span></code></pre></div>\n<h2>4. Other (regex)</h2>\n<p>Another feature in below code is string match, which looks like below. It should be very commonly used function for searching in web development.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tmpTable<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$regex</span><span class=\"token operator\">:</span> searchContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$options</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>5. Full Snippets</h2>\n<p>Below is the full code for this get request.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/fetchSearchOptions/:searchContent\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// requireAuth.requirePriorAuth,</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> searchContent <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>searchContent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> tableSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">strict</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> celllineTableNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"primary_gsc_line\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"primary_gsc_line_engineered\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ns_cell_lines_unmodified\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ns_cell_lines_derivatives\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> celllineSearch <span class=\"token operator\">=</span> celllineTableNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tmpTable <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">[</span>clt<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span>clt<span class=\"token punctuation\">,</span> tableSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> tmpTable<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$regex</span><span class=\"token operator\">:</span> searchContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$options</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> valueTableNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tpm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cna\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    valueTableNames<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tmpTable <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">[</span>vt<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span>vt<span class=\"token punctuation\">,</span> tableSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      celllineSearch<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        tmpTable<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">GeneSymbol</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$regex</span><span class=\"token operator\">:</span> searchContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$options</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">GeneSymbol</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>celllineSearch<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> celllineResult <span class=\"token operator\">=</span> celllineTableNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctn<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">searchType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cell line\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> ctn<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> geneResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Expression\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Copy Number Aberation\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">vtn<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">searchType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> vtn<span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Global search on \"</span> <span class=\"token operator\">+</span> searchContent <span class=\"token operator\">+</span> <span class=\"token string\">\" success.\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">globalSearch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">celllineResult</span><span class=\"token operator\">:</span> celllineResult<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">geneResult</span><span class=\"token operator\">:</span> geneResult<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Global search on \"</span> <span class=\"token operator\">+</span> searchContent <span class=\"token operator\">+</span> <span class=\"token string\">\" failed.\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">clinfo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"June 04, 2022","slug":"/notes/JavaScript-Snippets:-Promise-for-multiple-query","title":"JavaScript Snippets: Promise for multiple query","tags":["JavaScript","Backend","MongoDB"],"abstract":"In my one of the backend project, I need to query multiple tables and gather the result after all the searchs are done. Thus, normal promise will not work."}}},"pageContext":{"slug":"/notes/JavaScript-Snippets:-Promise-for-multiple-query"}},
    "staticQueryHashes": ["63159454"]}