{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Work-on-BAM-and-Sequence-file-with-R",
    "result": {"data":{"markdownRemark":{"html":"<h2>Read BAM into R</h2>\n<p>I previously use samtools/sambamba to do it, but now I found a pretty good tool <a href=\"https://bioconductor.org/packages/release/bioc/html/GenomicAlignments.html\">GenomicAlignments</a>. Below are some useful key code I mostly copy-paste.</p>\n<p>The below code will extract all <code class=\"language-text\">mated</code> reads from BAM file. Defaultly there is no \"seq\" included.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span><span class=\"token string\">\"GenomicAlignments\"</span><span class=\"token punctuation\">)</span>\n\nga_pairs <span class=\"token operator\">&lt;-</span> readGAlignmentPairs<span class=\"token punctuation\">(</span>bam_path<span class=\"token punctuation\">,</span> \n                                use.names <span class=\"token operator\">=</span> <span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> \n                                param <span class=\"token operator\">=</span> ScanBamParam<span class=\"token punctuation\">(</span>which<span class=\"token operator\">=</span>bedToGrange<span class=\"token punctuation\">,</span> what<span class=\"token operator\">=</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"qname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mapq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cigar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pos\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isize\"</span><span class=\"token punctuation\">,</span>\n                                                            <span class=\"token string\">\"seq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mate_status\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qual\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The bedToGrange object is very useful and can define what area of Genome I want to extract. The <code class=\"language-text\">ScanBamParam</code> can be used even more to do detailed filtering. To find out \"what\" attributes from bam are importable, use function <code class=\"language-text\">scanBamWhat</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> scanBamWhat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"qname\"</span>       <span class=\"token string\">\"flag\"</span>        <span class=\"token string\">\"rname\"</span>       <span class=\"token string\">\"strand\"</span>      <span class=\"token string\">\"pos\"</span>         <span class=\"token string\">\"qwidth\"</span>      <span class=\"token string\">\"mapq\"</span>       \n <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"cigar\"</span>       <span class=\"token string\">\"mrnm\"</span>        <span class=\"token string\">\"mpos\"</span>        <span class=\"token string\">\"isize\"</span>       <span class=\"token string\">\"seq\"</span>         <span class=\"token string\">\"qual\"</span>        <span class=\"token string\">\"groupid\"</span>    \n<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"mate_status\"</span>\n<span class=\"token operator\">></span> </code></pre></div>\n<p>If want to extract all reads, use function <code class=\"language-text\">ga_reads &lt;- readGAlignments(bam_path)</code>.</p>\n<p>To extract columns from it, use some build functions like:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># Get all chr</span>\nseqnames<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Get length of each chr</span>\nseqlengths<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># get unique name of chr</span>\nseqlevels<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># cigar ONLY works for reads, not pairs</span>\ncigar<span class=\"token punctuation\">(</span>ga_reads<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then I normally change the S4 to data.table.</p>\n<h2>Convert origin Sequence to CIGAR-formated one</h2>\n<p>After spending hours writing the code, I suddenly found a very nice solution <code class=\"language-text\">sequenceLayer</code> <a href=\"https://bioconductor.org/packages/release/bioc/manuals/GenomicAlignments/man/GenomicAlignments.pdf\">here</a>. This function directly convert the origin sequence into the cigar preprocessed sequence, including Insert/Deletion/Clips .etc. Below code will read the BAM file into R, and get reference-matchable sequence based on orighn sequence and cigar string.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">bam_path <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"path/to/Test.bam\"</span>\n\n<span class=\"token comment\"># Parse BAM files into data.table</span>\nga_pairs <span class=\"token operator\">&lt;-</span> readGAlignmentPairs<span class=\"token punctuation\">(</span>bam_path<span class=\"token punctuation\">,</span> \n                                use.names <span class=\"token operator\">=</span> <span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> \n                                param <span class=\"token operator\">=</span> ScanBamParam<span class=\"token punctuation\">(</span>what<span class=\"token operator\">=</span>scanBamWhat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span> as.data.table<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Get sequence without clip, insertion, deletion</span>\nfirst_seq <span class=\"token operator\">&lt;-</span> sequenceLayer<span class=\"token punctuation\">(</span>DNAStringSet<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token operator\">$</span>seq.first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ga_pairs<span class=\"token operator\">$</span>cigar.first<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2>replaceAt/extractAt string</h2>\n<p>The <code class=\"language-text\">replaceAt</code> and <code class=\"language-text\">extractAt</code> function <a href=\"https://www.bioconductor.org/packages/devel/bioc/manuals/Biostrings/man/Biostrings.pdf\">here</a> is very useful to modify string based on locations.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> x <span class=\"token operator\">&lt;-</span> BString<span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefghijklm\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> at1 <span class=\"token operator\">&lt;-</span> IRanges<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> extractAt<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> at1<span class=\"token punctuation\">)</span>\nBStringSet object of length <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    width seq\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">3</span> efg\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">3</span> def\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">3</span> cde\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">3</span> bcd\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">3</span> abc</code></pre></div>\n<p>The <code class=\"language-text\">replaceAt</code> function is powerful to cut or insert characters, but the action terms must be well organised a bit, like into IRange or other format.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> replaceAt<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span><span class=\"token operator\">-</span>letter BString object\nseq<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>ab<span class=\"token operator\">-</span>c<span class=\"token operator\">+</span>defghijklm\n<span class=\"token operator\">></span> </code></pre></div>\n<h2>Concat two DNAStringSet / Subset Sequence</h2>\n<p><code class=\"language-text\">xscat</code> function can be used to paste two DNAstringSet together. Also in the below code, I used <code class=\"language-text\">subseq</code> to select part of the string.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">forward_seq <span class=\"token operator\">&lt;-</span> subseq<span class=\"token punctuation\">(</span>ov_seq_first<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">,</span> sum_base<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nback_seq <span class=\"token operator\">&lt;-</span> subseq<span class=\"token punctuation\">(</span>ov_seq_first<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">,</span> sum_base<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> tmp_count<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nov_seq_first<span class=\"token punctuation\">[</span>i_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;-</span> xscat<span class=\"token punctuation\">(</span>forward_seq<span class=\"token punctuation\">,</span> back_seq<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Split CIGAR string</h2>\n<p>Below is my quick code to split CIGAR into label and count number</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">cigar_label_first <span class=\"token operator\">&lt;-</span> str_extract_all<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token operator\">$</span>cigar.first<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[A-Z]\"</span><span class=\"token punctuation\">)</span>\ncigar_count_first <span class=\"token operator\">&lt;-</span> gsub<span class=\"token punctuation\">(</span><span class=\"token string\">\"[A-Z]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> ga_pairs<span class=\"token operator\">$</span>cigar.first<span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span> str_split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Another way is to use cigar-util functions in GenomicAlignments package. The challenge is that after parsing, you will get a long list of IRanges, which seems not easy to do modification with loops.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> cigarRangesAlongQuerySpace<span class=\"token punctuation\">(</span>ga_pairs<span class=\"token operator\">$</span>cigar.first<span class=\"token punctuation\">)</span>\nIRangesList object of length <span class=\"token number\">611822</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nIRanges object with <span class=\"token number\">2</span> ranges and <span class=\"token number\">0</span> metadata columns<span class=\"token operator\">:</span>\n          start       end     width\n      <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>         <span class=\"token number\">1</span>       <span class=\"token number\">100</span>       <span class=\"token number\">100</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>       <span class=\"token number\">101</span>       <span class=\"token number\">300</span>       <span class=\"token number\">200</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nIRanges object with <span class=\"token number\">2</span> ranges and <span class=\"token number\">0</span> metadata columns<span class=\"token operator\">:</span>\n          start       end     width\n      <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>         <span class=\"token number\">1</span>        <span class=\"token number\">39</span>        <span class=\"token number\">39</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>        <span class=\"token number\">40</span>       <span class=\"token number\">299</span>       <span class=\"token number\">260</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nIRanges object with <span class=\"token number\">2</span> ranges and <span class=\"token number\">0</span> metadata columns<span class=\"token operator\">:</span>\n          start       end     width\n      <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>         <span class=\"token number\">1</span>        <span class=\"token number\">53</span>        <span class=\"token number\">53</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>        <span class=\"token number\">54</span>       <span class=\"token number\">294</span>       <span class=\"token number\">241</span>\n\n<span class=\"token ellipsis\">...</span>\n<span class=\"token operator\">&lt;</span><span class=\"token number\">611819</span> more elements<span class=\"token operator\">></span></code></pre></div>","frontmatter":{"date":"April 06, 2023","slug":"/notes/Work-on-BAM-and-Sequence-file-with-R","title":"Work on BAM and Sequence with R","tags":["R","BAM","String"],"abstract":"BAM is large, which normally works only with low-level languages like C/C++. Since I mostly only use R, here are some collections of my code to read/modify BAM file."}}},"pageContext":{"slug":"/notes/Work-on-BAM-and-Sequence-file-with-R"}},
    "staticQueryHashes": ["63159454"]}