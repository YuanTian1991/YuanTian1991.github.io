{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Parallel-in-R",
    "result": {"data":{"markdownRemark":{"html":"<p>R is such a handy languages, but the parallel is not. It can't perform like node.js, that in parallel running, each thread must have one core used. Thus, the maxium core is limited by the machine.</p>\n<p>There are a couple of ways to do parallel running in R. Previously I always use <code class=\"language-text\">doParallel</code>, but recently I prefer <code class=\"language-text\">mclapply</code>.</p>\n<h2>mclapply</h2>\n<p>Just like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span><span class=\"token string\">\"parallel\"</span><span class=\"token punctuation\">)</span>\n\ngetConversionRate <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">&lt;-</span> strsplit<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> split<span class=\"token operator\">=</span><span class=\"token string\">\"//\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    message<span class=\"token punctuation\">(</span><span class=\"token string\">\"Working on \"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n\n    chh <span class=\"token operator\">&lt;-</span> fread<span class=\"token punctuation\">(</span>glue<span class=\"token punctuation\">(</span><span class=\"token string\">\"{path}/{name}_chh.bed.gz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> skip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span>\n    cpg <span class=\"token operator\">&lt;-</span> fread<span class=\"token punctuation\">(</span>glue<span class=\"token punctuation\">(</span><span class=\"token string\">\"{path}/{name}_cpg.bed.gz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> skip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span>\n    \n    return<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">(</span>mean<span class=\"token punctuation\">(</span>chh<span class=\"token operator\">$</span>V11<span class=\"token punctuation\">[</span>chh<span class=\"token operator\">$</span>V10 <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mean<span class=\"token punctuation\">(</span>cpg<span class=\"token operator\">$</span>V11<span class=\"token punctuation\">[</span>cpg<span class=\"token operator\">$</span>V10 <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconversionResult <span class=\"token operator\">&lt;-</span> mclapply<span class=\"token punctuation\">(</span>df<span class=\"token operator\">$</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> getConversionRate<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mc.cores <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sometimes I noticed that with <code class=\"language-text\">mclapply</code>, if the R program is killed in the middle of running (for example, due to lack of disk space), the threads are still runnning. In that case, I directly kill all threads with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">killall</span> -u tian</code></pre></div>\n<h2>doParallel</h2>\n<p>The <code class=\"language-text\">detectCores()</code> function is useful to find out total number of cores can be used on the machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># load Package</span>\nlibrary<span class=\"token punctuation\">(</span><span class=\"token string\">\"doParallel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Find out how many cores are available.</span>\ndetectCores<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Create cluster with desired number of cores.</span>\ncl <span class=\"token operator\">&lt;-</span> makeCluster<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Reguster cluster</span>\nregisterDoParallel<span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Find out how many cores are being used</span>\ngetDoParWorkers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nlibrary<span class=\"token punctuation\">(</span>foreach<span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">&lt;-</span> foreach<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%dopar%</span> sqrt<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\nregisterDoSEQ<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\non.exit<span class=\"token punctuation\">(</span>stopCluster<span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"date":"May 04, 2022","slug":"/notes/Parallel-in-R","title":"Parallel in R","tags":["R","paprallel"],"abstract":"Here is a simple record of how to use multiple ways to do R parallel running."}}},"pageContext":{"slug":"/notes/Parallel-in-R"}},
    "staticQueryHashes": ["63159454"]}