{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Learn-Nextflow:-Part-1",
    "result": {"data":{"markdownRemark":{"html":"<p>For a long time I thought nextflow a tool to \"link\" various bash tools. One important feature for nextflow is that it can <code class=\"language-text\">-resume</code> pipeline, so that if I modified part of the script, not whole pipeline need to be rerun.</p>\n<h2>1. Groovy Programming Language</h2>\n<p>Firstly nextflow do use <a href=\"https://www.nextflow.io/docs/latest/script.html#\">a specific progamming language called \"Groovy\"</a>. I don't why it's not directly using shell as default languages...No wonder some command in the tutorial script looks weird.</p>\n<p>Mostly Groovy is just like other quick programming language, can print, if else, for loop .etc.</p>\n<h3>1.1. Printing</h3>\n<p>Double-quoted strings support variable interpolations, while single-quoted strings do not. sIn below two syntax, only the second one print \"Hello World\", the first one print out \"$x\"</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">x <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span>\nprintln <span class=\"token string\">'$x'</span>\nprintln <span class=\"token string gstring\">\"<span class=\"token expression\"><span class=\"token punctuation\">$</span>x</span>\"</span></code></pre></div>\n<p>This is mostly likely going to be use for log output in each process.</p>\n<h3>1.2. Reserved Variables</h3>\n<p>There are some reserved variables name, like <code class=\"language-text\">baseDir</code>, <code class=\"language-text\">task</code> .etc. It's easy to understand, just like you can't define a variable as \"break\" in most language. <code class=\"language-text\">task</code> seems is a parameter can be access at each process.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">process foo <span class=\"token punctuation\">{</span>\n  script<span class=\"token punctuation\">:</span>\n  <span class=\"token string gstring\">\"\"\"\n  some_tool --cpus <span class=\"token expression\"><span class=\"token punctuation\">$</span>task<span class=\"token punctuation\">.</span>cpus</span> --mem <span class=\"token expression\"><span class=\"token punctuation\">$</span>task<span class=\"token punctuation\">.</span>memory</span>\n  \"\"\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>1.3. Function declaration</h3>\n<p>A crazy way to define function. Below style closure function only allow one parameter, <code class=\"language-text\">it</code> is a reserved parameter, which represent the only one parameter you inputed into the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">square <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">*</span> it <span class=\"token punctuation\">}</span>\nprintln <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Two quick way to \"apply\" function on each element in a array. The first method run each parameter one bye one. The second one also run them one by one, <strong>but then collect the results into a array</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token punctuation\">[</span> <span class=\"token string gstring\">\"Yue\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"Wu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"Mark\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"Williams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"Sudha\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"Kumari\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>printMapClosure<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Below synatax smilar to javascript anonymous function declaration...</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> result<span class=\"token operator\">+=</span> myMap<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<h3>1.4. Files and I/O</h3>\n<p>This is possibly the most useful feature, but most Bioinformatic just require file path to run...So again not sure what it can be used. Seems we can use it to read ile, move file, delete file .etc.</p>\n<p>I have feeling that groovy is a bad design here, it confuse people between groovy and bash. Sometime we can use <code class=\"language-text\">cat</code> or <code class=\"language-text\">echo</code> in bash, sometimes we need to use <code class=\"language-text\">println</code>, closure function in groovy.</p>\n<h2>2. Process</h2>\n<p>The process definition starts with keyword the process, followed by process name and finally the process body delimited by curly brackets. The process body <strong>must</strong> contain a string which represents the command or, more generally, a script that is executed by it. A basic process looks like the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>directives<span class=\"token punctuation\">]</span>\n   input:\n    <span class=\"token operator\">&lt;</span>process inputs<span class=\"token operator\">></span>\n\n   output:\n    <span class=\"token operator\">&lt;</span>process outputs<span class=\"token operator\">></span>\n\n   when:\n    <span class=\"token operator\">&lt;</span>condition<span class=\"token operator\">></span>\n\n   <span class=\"token punctuation\">[</span>script<span class=\"token operator\">|</span>shell<span class=\"token operator\">|</span>exec<span class=\"token punctuation\">]</span>:\n   <span class=\"token operator\">&lt;</span>user script to be executed<span class=\"token operator\">></span> <span class=\"token comment\"># This part is required.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2.1. Script</h3>\n<p>The most important part is the <strong>script|shell|exec</strong>. The default is <code class=\"language-text\">script</code>.</p>\n<p>Note that, in script bash command, <code class=\"language-text\">\"\"</code> or <code class=\"language-text\">\"\"\"</code> does support variable interpretation, but <code class=\"language-text\">''</code> or <code class=\"language-text\">'''</code> does not. The nextflow (groovy) variable is vital here, which is normally defined as <code class=\"language-text\">$something</code>, and only <code class=\"language-text\">\"\"</code> can intepret them. However, if want bash to get system variable (not nextflow), like <code class=\"language-text\">$PATH</code>, it requires <code class=\"language-text\">''</code>. In other word, both have the same synatax style <code class=\"language-text\">$something</code>, but require different code line.</p>\n<p>Another solution for above problem is:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process myTask <span class=\"token punctuation\">{</span>\n    input:\n    val str from <span class=\"token string\">'Hello'</span>, <span class=\"token string\">'Hola'</span>, <span class=\"token string\">'Bonjour'</span>\n\n    shell:\n    <span class=\"token string\">''</span>'\n    <span class=\"token builtin class-name\">echo</span> User <span class=\"token environment constant\">$USER</span> says <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>str<span class=\"token punctuation\">}</span>\n    <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically there is no difference between shell and script, but the first can mix-used two variables.</p>\n<p>If I don't want to write raw shell command, but a shell script, I can be below way. Well...in other word, this so call <code class=\"language-text\">template</code> is a reserved name, and the functionality is similar to <code class=\"language-text\">./my_script.sh</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process template_example <span class=\"token punctuation\">{</span>\n    input:\n    val STR from <span class=\"token string\">'this'</span>, <span class=\"token string\">'that'</span>\n\n    script:\n    template <span class=\"token string\">'my_script.sh'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.1.1.  Scripts à la carte (按菜单点菜) ★★</h4>\n<p>This part is important here. <strong>It seems in nextflow process, I can directly run other program's synatax. Like R or Python, without write a R script then use Rscript</strong>. The vital thing is to write a line like <code class=\"language-text\">#!/usr/bin/r</code> on the top of script part in the process block.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process perlStuff <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token comment\">#!/usr/bin/perl</span>\n\n    print <span class=\"token string\">'Hi there!'</span> <span class=\"token builtin class-name\">.</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n\nprocess pyStuff <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token comment\">#!/usr/bin/python</span>\n\n    x <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n    y <span class=\"token operator\">=</span> <span class=\"token string\">'world!'</span>\n    print <span class=\"token string\">\"%s - %s\"</span> % <span class=\"token punctuation\">(</span>x,y<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Honestly, this is the third way I know how to run R, apart from in R interactive session and Rscript.</p>\n<h4>2.1.2. Conditional scripts ★</h4>\n<p>Well, it looks like a if-else provided to run different script fragments. If nextflow does not provided, it's also not hard to write it in R or Python right? Note that it use <code class=\"language-text\">else if</code> not <code class=\"language-text\">if else</code> like most language.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">seq_to_align <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span>.\nmode <span class=\"token operator\">=</span> <span class=\"token string\">'tcoffee'</span>\n\nprocess align <span class=\"token punctuation\">{</span>\n    input:\n    <span class=\"token function\">file</span> seq_to_aln from sequences\n\n    script:\n    if<span class=\"token punctuation\">(</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'tcoffee'</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token string\">\"\"</span>\"\n        t_coffee -in <span class=\"token variable\">$seq_to_aln</span> <span class=\"token operator\">></span> out_file\n        <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'mafft'</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token string\">\"\"</span>\"\n        mafft --anysymbol --parttree --quiet <span class=\"token variable\">$seq_to_aln</span> <span class=\"token operator\">></span> out_file\n        <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'clustalo'</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token string\">\"\"</span>\"\n        clustalo -i <span class=\"token variable\">$seq_to_aln</span> -o out_file\n        <span class=\"token string\">\"\"</span>\"\n    <span class=\"token keyword\">else</span>\n        error <span class=\"token string\">\"Invalid alignment mode: <span class=\"token variable\">${mode}</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.1.3. Summary</h4>\n<p>In summary, script is used to run command in each process block. There are a couple of similar ways to run it. But as beginner a easy solution is to always use bash and Rscript .etc. All so call features like \"Conditional\" are replacable in your script, in one way or another. So I don't like to mixing use various styles. Use bash if a good start I think.</p>\n<h3>2.2. Input</h3>\n<p><a href=\"https://www.nextflow.io/docs/latest/process.html#inputs\">This</a> is one vital part for nextflow, along with output I think.</p>\n<h4>2.2.1. val (most commonly used type)</h4>\n<p>A \"standard style\" of input is like this. There is a shorter version as just <code class=\"language-text\">val num</code> but I don't suggest people use that version. In short, a val (reserved word) is used to \"define\" inputted variable. Apart from val, <a href=\"https://www.nextflow.io/docs/latest/process.html#inputs\">there are other potential</a> types like: env, file, path, stdin, tuple and each. They are different, so when I code the nextflow config, it's vital to select proper input.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">num <span class=\"token operator\">=</span> Channel.from<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n\nprocess basicExample <span class=\"token punctuation\">{</span>\n  input:\n  val x from num\n\n  <span class=\"token string\">\"echo process job <span class=\"token variable\">$x</span>\"</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Important thing is, I should write all files used in nextflow pipeline as parameter variable, never use \"absolute path\" in nextflow code. It provide higher flexibility to replace those files.</p>\n<p>The thing I am not sure is, what's the difference between val and file here? If I just need a file path to run, why I can't use directory as variable.</p>\n<h4>2.2.2. path for files</h4>\n<p>A better recommanded variable type for files is <code class=\"language-text\">path</code>, not file. Like below, the stageAs can be given as name of the file. So for example if my sample names are J080001.fa.gz, J080002.fa.gz .etc. I can use stageAs to name them as \"RawFastq.fa.gz\" in nextflow pipline.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process foo <span class=\"token punctuation\">{</span>\n  input:\n    path x, stageAs: <span class=\"token string\">'data.txt'</span> from <span class=\"token string\">'/some/data/file.txt'</span>\n  <span class=\"token string\">\"\"</span>\"\n    your_command --in data.txt\n  <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.2.3. each is useful in combination of parameters</h4>\n<p>Many variables are useless, like env, stdin. But <code class=\"language-text\">each</code> is important, it looks like below. It can read array, then repeatly run each option with files.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sequences <span class=\"token operator\">=</span> Channel.fromPath<span class=\"token punctuation\">(</span><span class=\"token string\">'*.fa'</span><span class=\"token punctuation\">)</span>\nmethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'regular'</span>, <span class=\"token string\">'expresso'</span><span class=\"token punctuation\">]</span>\nlibraries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> file<span class=\"token punctuation\">(</span><span class=\"token string\">'PQ001.lib'</span><span class=\"token punctuation\">)</span>, file<span class=\"token punctuation\">(</span><span class=\"token string\">'PQ002.lib'</span><span class=\"token punctuation\">)</span>, file<span class=\"token punctuation\">(</span><span class=\"token string\">'PQ003.lib'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n\nprocess alignSequences <span class=\"token punctuation\">{</span>\n  input:\n  <span class=\"token function\">file</span> <span class=\"token function\">seq</span> from sequences\n  each mode from methods\n  each file<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">)</span> from libraries\n\n  <span class=\"token string\">\"\"</span>\"\n  t_coffee -in <span class=\"token variable\">$seq</span> -mode <span class=\"token variable\">$mode</span> -lib <span class=\"token variable\">$lib</span> <span class=\"token operator\">></span> result\n  <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>When multiple repeaters are declared, the process is executed for each combination of them.</strong></p>\n<p>Be careful that if there are two Chanels, they MUST have matched number of variable.</p>\n<h4>2.2.4. Summary</h4>\n<p>Input is not too complicate. Mostly is from Channel. Note that <code class=\"language-text\">path</code> is prefered for file input, and stageAs can be used to give file another name for now in nextflow. Each is very useful for parameter repeat run.</p>\n<h3>2.3 Output</h3>\n<h4>2.3.1. File output ★★★</h4>\n<p>Below is an important example how to export files. It looks like file 'result.txt' will be automatically passed to channel numbers after the echo script command. I am thinking if I use a complex fastp command would it work? I suspect it work, but I must make sure one command only export one file. So... what if one process produce multiple output?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process randomNum <span class=\"token punctuation\">{</span>\n   output:\n   <span class=\"token function\">file</span> <span class=\"token string\">'result.txt'</span> into numbers\n   <span class=\"token string\">''</span>'\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$RANDOM</span> <span class=\"token operator\">></span> result.txt\n   <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span>\n\nnumbers.subscribe <span class=\"token punctuation\">{</span> println <span class=\"token string\">\"Received: \"</span> + it.text <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chnanel will be automatically created in the output line if they don't exist yet.</p>\n<h4>2.3.2. FlatMap and Subscribe</h4>\n<p>In below example, <code class=\"language-text\">chunk_</code> files are automatically created, and they are passed to channel letters. Then letters can use functions like flatMap() and subscribe show results. That step converted letters from list to</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process splitLetters <span class=\"token punctuation\">{</span>\n\n    output:\n    <span class=\"token function\">file</span> <span class=\"token string\">'chunk_*'</span> into letters\n\n    <span class=\"token string\">''</span>'\n    <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'Hola'</span> <span class=\"token operator\">|</span> <span class=\"token function\">split</span> -b <span class=\"token number\">1</span> - chunk_\n    <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span>c\n\nletters.flatMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.subscribe <span class=\"token punctuation\">{</span> println <span class=\"token string\">\"File: <span class=\"token variable\">${it.name}</span> => <span class=\"token variable\">${it.text}</span>\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.3.3. Path and Conditional Output</h4>\n<p>I did not found example for Path...</p>\n<p>Below is an example of output txt. I think it's very important. For example, if I write a R script, it will return TRUE for success run, and FALSE for failed run, how could nextflow know this process if correct and continue? An solution is the R result only write out a file when the calculation is TRUE, then use conditional output to send it to channel.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">output:\n    file<span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span> optional <span class=\"token boolean\">true</span> into outChannel</code></pre></div>\n<h3>2.4. When</h3>\n<p>As I suspected, nextflow must have some way to chooce to \"continue\" the pipeline or not. One solution is above conditional output. And the other is below, use <code class=\"language-text\">When</code> to do it, the idea is also as I expected, by checking output file name to decide to continue or not.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process <span class=\"token function\">find</span> <span class=\"token punctuation\">{</span>\n  input:\n  <span class=\"token function\">file</span> proteins\n  val <span class=\"token builtin class-name\">type</span> from dbtype\n\n  when:\n  proteins.name <span class=\"token operator\">=~</span> /^BB11.*/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">'nr'</span>\n\n  script:\n  <span class=\"token string\">\"\"</span>\"\n  blastp -query <span class=\"token variable\">$proteins</span> -db nr\n  <span class=\"token string\">\"\"</span>\"\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2.5. Directives</h3>\n<p>Using the directive declarations block you can provide optional settings that will affect the execution of the current process.</p>\n<p>These are some additional parameter canbe set in nextflow. Some are useful, like <code class=\"language-text\">beforeScript</code>, it can be used to setup some env:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process foo <span class=\"token punctuation\">{</span>\n  beforeScript <span class=\"token string\">'source /cluster/bin/setup'</span>\n  <span class=\"token string\">\"\"</span>\"\n  <span class=\"token builtin class-name\">echo</span> bar\n  <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Conda</code>, it is used to define your software and version. Where is the similar thing for R script?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process foo <span class=\"token punctuation\">{</span>\n  conda <span class=\"token string\">'bwa=0.7.15'</span>\n\n  <span class=\"token string\">''</span>'\n  your_command --here\n  <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">container</code> is used to define a docker container I want to use. I suspect I should use things like Ubuntu, or image-fastq here?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">process runThisInDocker {\n\n  container 'dockerbox:tag'\n\n  \"\"\"\n  &lt;your holy script here>\n  \"\"\"\n\n}</code></pre></div>\n<p><code class=\"language-text\">CpGs</code> can be set here. Ther prupose of setting is to protect other programes runnning on the computer. Otherwise it looks like nextflow will use up all resources.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">process big_job {\n\n  cpus 8\n  executor 'sge'\n\n  \"\"\"\n  blastp -query input_sequence -num_threads ${task.cpus}\n  \"\"\"\n}</code></pre></div>\n<p><code class=\"language-text\">errorStrategy</code> ★ ★ is used to retry process, and maxErrors can be set to make sure it work. <strong>This is an important feature for Amazon Spot I think.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process retryIfFail <span class=\"token punctuation\">{</span>\n  errorStrategy <span class=\"token string\">'retry'</span>\n  maxErrors <span class=\"token number\">5</span>\n\n  <span class=\"token string\">\"\"</span>\"\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'do this as that .. '</span>\n  <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">maxForks</code> ★ ★ is use to define number of parallel thread one process can have.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process doNotParallelizeIt <span class=\"token punctuation\">{</span>\n   maxForks <span class=\"token number\">1</span>\n   <span class=\"token string\">''</span>'\n   <span class=\"token operator\">&lt;</span>your script here<span class=\"token operator\">></span>\n   <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">publishDir</code> ★ ★ is used to export results. This is especially useful for output final results into a folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process foo <span class=\"token punctuation\">{</span>\n\n    publishDir <span class=\"token string\">'/data/chunks'</span>\n\n    output:\n    <span class=\"token function\">file</span> <span class=\"token string\">'chunk_*'</span> into letters\n\n    <span class=\"token string\">''</span>'\n    <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'Hola'</span> <span class=\"token operator\">|</span> <span class=\"token function\">split</span> -b <span class=\"token number\">1</span> - chunk_\n    <span class=\"token string\">''</span>'\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3. Channel</h2>\n<p>Nextflow distinguish two different kinds of channels: queue channels and value channels. From my understanding, <code class=\"language-text\">value channels</code> only represents channel with only one value, does not mean anything special. All queries will be sent to process in parallel (so how control total thread? CpG, memory? by <code class=\"language-text\">cpu</code> parameter above?)</p>\n<p><code class=\"language-text\">of</code> method can be used to \"create\" channel from an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ch <span class=\"token operator\">=</span> Channel.of<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span>, <span class=\"token number\">3</span>, <span class=\"token number\">5</span>, <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span>\nch.view <span class=\"token punctuation\">{</span> <span class=\"token string\">\"value: <span class=\"token variable\">$it</span>\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>What's the difference between just use an array as input and use array-produced channel as input?</p>\n<p><code class=\"language-text\">fromList</code> is more likely should be used for array.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Channel\n    .fromList<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span>, <span class=\"token string\">'b'</span>, <span class=\"token string\">'c'</span>, <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n    .view <span class=\"token punctuation\">{</span> <span class=\"token string\">\"value: <span class=\"token variable\">$it</span>\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">fromPath</code> is more likey to be imported to get file path.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">files <span class=\"token operator\">=</span> Channel.fromPath<span class=\"token punctuation\">(</span> <span class=\"token string\">'data/**.fa'</span> <span class=\"token punctuation\">)</span>\nmoreFiles <span class=\"token operator\">=</span> Channel.fromPath<span class=\"token punctuation\">(</span> <span class=\"token string\">'data/**/*.fa'</span> <span class=\"token punctuation\">)</span>\npairFiles <span class=\"token operator\">=</span> Channel.fromPath<span class=\"token punctuation\">(</span> <span class=\"token string\">'data/file_{1,2}.fq'</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">fromSRA</code> can be used to fetch SRA data. This is a cool feature, for PGP data I think.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ERR908507'</span>, <span class=\"token string\">'ERR908506'</span>, <span class=\"token string\">'ERR908505'</span><span class=\"token punctuation\">]</span>\nChannel\n    .fromSRA<span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span>\n    .view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">watchPath</code> ★★★ This is really cool! It can watch certain folders, and trigger nextflow pipeline when there is any file change.</p>\n<h2>Summary</h2>\n<p>I thought nextflow is easy, but apparently I was wrong. This is just the fist part of tutoral.</p>","frontmatter":{"date":"February 10, 2022","slug":"/notes/Learn-Nextflow:-Part-1","title":"Learn Nextflow: Part 1","tags":["nextflow"],"abstract":"Recently I need to code a nextflow for RRBS analysis, so I learned nextflow a bit. Here is my record, it contains some most important and essential knowledge and understanding from me for this pipeline tool."}}},"pageContext":{"slug":"/notes/Learn-Nextflow:-Part-1"}},
    "staticQueryHashes": ["63159454"]}