{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/My-Github-Commands",
    "result": {"data":{"markdownRemark":{"html":"<p>Here I just record my handy commands, not full-power git manual. As I guess I can't remember them all, so some essential one accumulated list would be perfect for me.</p>\n<h2>1. Abandon all my current changes</h2>\n<p>Happend when I wrote couple lines, then find this is the correct branch.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset --hard HEAD</code></pre></div>\n<p>It would remove all add/delete I have done, to the latest commit.</p>\n<h2>2. Checkout new branch from current</h2>\n<p>Open a bug/feature branch based on current one (for example dev-live), after fixing bugs/features, I will merge this bug/feature branch to main (current) one.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b FEATURE dev-live</code></pre></div>\n<p>Another solution is, <strong>after you are on the correct current verison branch</strong>, run below command. I prefer the first one.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b FEATURE</code></pre></div>\n<h2>3. Keep the feature branch up to date</h2>\n<p>This happens when I am developing a new feature/bug in a feature branch, but I see the main branch has been updated by others. So I need to firstly checkout to main branch, update the main branch, then merge the new-updated main branch to my current-feature branch.</p>\n<p>Below is a solution I found online, which works fine, but the merge step cause some conflict for me to solve. And those conflict seems happen on files I did not touched...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout dev-live\n<span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> pull --rebase\n<span class=\"token function\">git</span> checkout myfeature\n\n<span class=\"token function\">git</span> merge dev-live \n\n<span class=\"token comment\"># Above step cause some conflict on my feature branch.</span>\n<span class=\"token comment\"># After solve those conflict</span>\n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Merged Updated Conflict from new dev-live\"</span></code></pre></div>\n<p>Then I can continue the Feature/Bug development.</p>\n<h2>4. Discard changes to one file</h2>\n<p>This happens somtimes I modified a lot of files, but eventually found some file is totally unneccesary to be modified. So I want to revoke what I have done to certain one file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -- <span class=\"token function\">file</span></code></pre></div>\n<h2>5. Rename a Local branch</h2>\n<p>This happens when I created a branch, but later I don't like the name. In most case, it's because I fixed many issues in it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -m currentBranchName newBranchName</code></pre></div>\n<h2>6. Replace a Branch completelyl with Another</h2>\n<p>This happens when I pushed and merged a branch, say <code class=\"language-text\">SolveIssues</code>, to master. Then I want to continue solve more issues, then I want to also use the same name <code class=\"language-text\">SolveIssues</code>. However, if I blindly merge, sometimes conflict would happen. So the best way here is to directly rewrite SolveIssues Branch with the master branch, then continue developing.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout SolveIssues\n<span class=\"token function\">git</span> reset --hard maste</code></pre></div>\n<h2>7. Copy changes in one or more commit in one branch into another</h2>\n<p>This happens a lot to me when I update ChAMP package, I need to modify the master branch first, then checkout into RELEASE_3_XX branch, then do the modifications again, by typing! So I think there must be a way to do it, which is <code class=\"language-text\">cherry-picking</code>.</p>\n<p>Assuming I am have modified branch master, and committed something into Github. Now I should firstly get the commit ID of these changes, with below command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --oneline -3</code></pre></div>\n<p>Then I found the two commits I want to cherry-pick:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ff261fe <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master, upstream/master, origin/master, origin/HEAD<span class=\"token punctuation\">)</span> Removed Valid Checking <span class=\"token keyword\">in</span> champ.runCombat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, Combat now take factors with even one sample.\n7223d10 Fixed bug of missing blc function, removed counfouding checking <span class=\"token keyword\">in</span> champ.runCombat.R\n9a0b89a bump x.y.z version to odd y following creation of RELEASE_3_12 branch</code></pre></div>\n<p>Then I checkout to another branch, say RELEASE_12 here, cherry-pick these two commit with code:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> cherry-pick 7223d10 ff261fe -n</code></pre></div>\n<p>Then the changes I did in commit 7223d10 ff261fe will all be copied into this branch, but not committed (because of the <code class=\"language-text\">-n</code> parameter above), which is exactly what I need. Note that sometimes there may be conflict when cherry-picking, just solve them, then recommit.</p>\n<h2>8. Fetch/Pull a remote branch to local for development</h2>\n<p>This happens when I need to fetch a remote branch which was not exist in my local computer for development. I did not found better way, so here I record a stupid way:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> checkout remote_new_branch</code></pre></div>","frontmatter":{"date":"June 29, 2020","slug":"/notes/My-Github-Commands","title":"My Github Commands","tags":["Github"],"abstract":"For many years, I merely only use commands like git add, git commit, git push .etc. Now I am colaborating with more and more professional people on Github. So I want to record a bit my commands learned here. It's not systemic, but maybe a quick cheatsheet."}}},"pageContext":{"slug":"/notes/My-Github-Commands"}},
    "staticQueryHashes": []}