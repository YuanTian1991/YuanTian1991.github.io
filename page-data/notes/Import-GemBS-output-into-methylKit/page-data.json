{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Import-GemBS-output-into-methylKit",
    "result": {"data":{"markdownRemark":{"html":"<p>I am recently working on a set of RRBS data, I have preprocessed it with <a href=\"https://github.com/heathsc/gemBS-rs\">gemBS-rs</a>, which is fast and super easy to run in my <a href=\"https://yuantian1991.github.io/notes/Analysis-RRBS-with-GemBS\">previous note</a>. The next step is to import the gemBS output into a downstream software, here I am using <a href=\"https://bioconductor.org/packages/release/bioc/html/methylKit.html\">methylKit</a>. methylKit actually does not defaultly support GemBS, but it support Bismark, another famouse bisulfit sequencing mapping tool. However, methylKit does <a href=\"https://bioconductor.org/packages/release/bioc/manuals/methylKit/man/methylKit.pdf\">support a generic file format</a>, which means I just need to prepare files with required column, then it can be imported into methylKit.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># read a generic text file containing CpG methylation values</span>\n<span class=\"token comment\"># let's first look at the content of the file</span>\ngeneric.file<span class=\"token operator\">=</span>system.file<span class=\"token punctuation\">(</span><span class=\"token string\">\"extdata\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"generic1.CpG.txt\"</span><span class=\"token punctuation\">,</span>package <span class=\"token operator\">=</span> <span class=\"token string\">\"methylKit\"</span><span class=\"token punctuation\">)</span>\nread.table<span class=\"token punctuation\">(</span>generic.file<span class=\"token punctuation\">,</span>header<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># And this is how you can read that generic file as a methylKit object</span>\nmyobj<span class=\"token operator\">=</span>methRead<span class=\"token punctuation\">(</span> generic.file<span class=\"token punctuation\">,</span>\npipeline<span class=\"token operator\">=</span>list<span class=\"token punctuation\">(</span>fraction<span class=\"token operator\">=</span><span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">,</span>chr.col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>start.col<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>end.col<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\ncoverage.col<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>strand.col<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>freqC.col<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nsample.id<span class=\"token operator\">=</span><span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span>assembly<span class=\"token operator\">=</span><span class=\"token string\">\"hg18\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>So what I need to do is to figure out how to \"fit\" GemBS output (extracted CpG file) to methylKit generic import plan.</p>\n<h2>1. Reformat GemBS ENCODE CpG files</h2>\n<p>According to the methylKit document, it requires \"chr\", \"start\", \"end\", \"strand\", \"coverage\", \"freqC\", and \"freqT\" columns as input. However, according to the <a href=\"http://statgen.cnag.cat/GEMBS/UserGuide/_build/html/pipelineExtract.html\">tutorial of gemBS</a>, the output have two format, ENCODE format and gemBS format. Between then, <strong>only the ENCODE style file have strand information</strong>. So, to achieve my goal, I want to reformat the ENCODE style files, (those with <code class=\"language-text\">_cpg.bed.gz</code> ending) with above column.</p>\n<p>Among them one thing is to calculate <strong>freqC</strong> and <strong>freqT</strong>. In bisulfit conversion, unmethylated cytosine will be converted to uracils (U), then it will be sequenced out as \"T\", thus freqT represent the \"unmethylated ratio\". Also, methylated cytosine will be \"protected\" (or \"covered\", \"attached\" whatever similar words) by methyl chemical group, so it will remain to be cytosine, thus freqC represent the ratio of \"methylated\" sites.</p>\n<p>So, in the ENCODE style output of GemBS, the 11th column \"Percentage of reads showing methylation\" represent the freqC, and we can manually calculate freqT as: 100 - freqC. Below is a script I wrote to do the conversion. By using <code class=\"language-text\">data.table</code> R package, it takes roughtly 5-10 seconds to convert one gemBS output into methylKit readable file format.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># This script read into GemBS's output with MethylKit</span>\n<span class=\"token comment\"># Author: Tian</span>\n\nlibrary<span class=\"token punctuation\">(</span>data.table<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">## Convert gemBS export ENCODE style CpG bed file into MethylKit Generic style.</span>\ncpgFiles <span class=\"token operator\">&lt;-</span> dir<span class=\"token punctuation\">(</span><span class=\"token string\">\"../1.GemBS_Analysis/result/extract/\"</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> full.names<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">=</span><span class=\"token string\">\"*_cpg.bed.gz$\"</span><span class=\"token punctuation\">)</span>\nbaseDIR <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"./reformatedCpG/\"</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file.exists<span class=\"token punctuation\">(</span>baseDIR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> dir.create<span class=\"token punctuation\">(</span>baseDIR<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>fileName <span class=\"token keyword\">in</span> cpgFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    sampleName <span class=\"token operator\">&lt;-</span> strsplit<span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> split<span class=\"token operator\">=</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    message<span class=\"token punctuation\">(</span><span class=\"token string\">\"Formating sample \"</span><span class=\"token punctuation\">,</span> sampleName<span class=\"token punctuation\">)</span>\n\n    tmpTable <span class=\"token operator\">&lt;-</span> fread<span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> skip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    tmpTable <span class=\"token operator\">&lt;-</span> tmpTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    colnames<span class=\"token punctuation\">(</span>tmpTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">(</span><span class=\"token string\">\"chr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strand\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"coverage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"freqC\"</span><span class=\"token punctuation\">)</span>\n    tmpTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"freqT\"</span> <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> freqC<span class=\"token punctuation\">]</span>\n\n    fwrite<span class=\"token punctuation\">(</span>tmpTable<span class=\"token punctuation\">,</span> paste0<span class=\"token punctuation\">(</span>baseDIR<span class=\"token punctuation\">,</span> sampleName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_reformated.CpG.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> quote<span class=\"token operator\">=</span><span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">,</span> row.names<span class=\"token operator\">=</span><span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the *_cpg.bed.gz (ENCODE format output) will be converted into a folder called <code class=\"language-text\">reformatedCpG</code> in current dir.</p>\n<h2>2. Read generic files into methylKit</h2>\n<p>After transforming, the second step is to read the files into R with methyKit. The software provided a function to organize all samples into one large beta matrix, which is perfect for downstream analysis.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">cpgFiles <span class=\"token operator\">&lt;-</span> dir<span class=\"token punctuation\">(</span><span class=\"token string\">\"./reformatedCpG\"</span><span class=\"token punctuation\">,</span> full.name<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">)</span>\nsampleNames <span class=\"token operator\">&lt;-</span> unname<span class=\"token punctuation\">(</span>sapply<span class=\"token punctuation\">(</span>cpgFiles<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> str_extract<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(?&lt;=CpG/)(.*)(?=_reformated)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmyobj <span class=\"token operator\">&lt;-</span> methRead<span class=\"token punctuation\">(</span>as.list<span class=\"token punctuation\">(</span>cpgFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  sample.id<span class=\"token operator\">=</span>as.list<span class=\"token punctuation\">(</span>sampleNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  pipeline<span class=\"token operator\">=</span>list<span class=\"token punctuation\">(</span>fraction<span class=\"token operator\">=</span><span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">,</span> chr.col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start.col<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> end.col<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                                coverage.col<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> strand.col<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> freqC.col<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  assembly<span class=\"token operator\">=</span><span class=\"token string\">\"hg38\"</span><span class=\"token punctuation\">,</span>\n                  treatment<span class=\"token operator\">=</span>pheno<span class=\"token punctuation\">,</span>\n                  mincov<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\nfiltered.myobj <span class=\"token operator\">&lt;-</span> filterByCoverage<span class=\"token punctuation\">(</span>myobj<span class=\"token punctuation\">,</span> lo.count<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> lo.perc<span class=\"token operator\">=</span><span class=\"token keyword\">NULL</span><span class=\"token punctuation\">,</span> hi.count<span class=\"token operator\">=</span><span class=\"token keyword\">NULL</span><span class=\"token punctuation\">,</span> hi.perc<span class=\"token operator\">=</span><span class=\"token number\">99.9</span><span class=\"token punctuation\">)</span>\nfiltered.normed.myobj <span class=\"token operator\">&lt;-</span> normalizeCoverage<span class=\"token punctuation\">(</span>filtered.myobj<span class=\"token punctuation\">)</span>\n\nmeth <span class=\"token operator\">&lt;-</span> unite<span class=\"token punctuation\">(</span>filtered.normed.myobj<span class=\"token punctuation\">,</span> destrand<span class=\"token operator\">=</span><span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">)</span>\nbeta <span class=\"token operator\">&lt;-</span> percMethylation<span class=\"token punctuation\">(</span>meth<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">100</span>\nsave<span class=\"token punctuation\">(</span>meth<span class=\"token punctuation\">,</span>file<span class=\"token operator\">=</span><span class=\"token string\">\"meth.rda\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>By using above script, each reformed CpG file in <code class=\"language-text\">reformedCpG</code> folder can be imported into R via methylKit, and a matrix (<code class=\"language-text\">beta</code> object) can be generated. Note that in <code class=\"language-text\">meth</code> function above, it will select only CpG sites exist in all samples, so if you have many samples (50, or even 100+), it maybe hard to find consensus CpGs, you may adjust <code class=\"language-text\">min.per.group</code> parameter in this function to ask program how many samples need to be \"consensus\" for a CpG site.</p>","frontmatter":{"date":"November 28, 2021","slug":"/notes/Import-GemBS-output-into-methylKit","title":"Import GemBS output into methylKit","tags":["RRBS","methylKit"],"abstract":"Previously I have preprocessed RRBS data with GemBS, now I want to continue the downstream analysis. The tool I am using is methylKit, so I find a way to import the GemBS output result into methyKit."}}},"pageContext":{"slug":"/notes/Import-GemBS-output-into-methylKit"}},
    "staticQueryHashes": ["63159454"]}