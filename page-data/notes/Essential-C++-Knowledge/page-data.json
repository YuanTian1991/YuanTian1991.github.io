{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Essential-C++-Knowledge",
    "result": {"data":{"markdownRemark":{"html":"<h2>A Basic C++ Program</h2>\n<p>Firstly, below is a typical C++ program <code class=\"language-text\">hello.cpp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To compile it, I need to run the below command to compile it, then an executable software \"hello\" will appear in the folder, we can run it.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">g++ hello.cpp <span class=\"token parameter variable\">-o</span> hello</code></pre></div>\n<h2>Include Libraries</h2>\n<h3>Standard Template Library (STL)</h3>\n<p>There are two ways mostly to include libraries, one type is called STL (Standard Template Library), they are included in standard C++, there is no need to install them separately, just use them as:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Manually Compile Install Third-Party Library</h3>\n<p>Another type is specific libraries like \"Bamtools\", they are third-party libraries and installation varies. In generally, they need to be downloaded, build (compiled), then we can included them into the C++ code. Below are my actions to add <a href=\"https://github.com/pezmaster31/bamtools/wiki\">Bamtools library</a> into the C++ code.</p>\n<p>In a separate folder I run below command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/pezmaster31/bamtools.git\n\n<span class=\"token comment\"># In the top directory</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n\n<span class=\"token comment\"># Make the final compiled folder</span>\n<span class=\"token function\">mkdir</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/compiled/bamtools/\n\ncmake <span class=\"token parameter variable\">-DCMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/compiled/bamtools/ <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>Then the final compiled bamtools would exist in the final compiled folder. In above command, <code class=\"language-text\">cmake</code> is actually a command to create Makefile, based on CMakeLists.txt, while <code class=\"language-text\">make`` is the real command for compiling, create the executable software, and </code>make install` put the lib/include files in the final compiled folder.</p>\n<p>CMake is a tool to manage building of source code. To quickly learn how to write CMakelists.txt, <a href=\"https://github.com/krux02/minimal_cmake_example\">this</a> is a good example.</p>\n<p>Anyway, now I can try include Bamtools into my hello.cpp scripts and compile it:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n\n<span class=\"token comment\">// Bamtools</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;api/BamReader.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">g++ hello.cpp <span class=\"token parameter variable\">-o</span> hello <span class=\"token parameter variable\">-I</span> /path/to//compiled/bamtools/include/bamtools <span class=\"token parameter variable\">-L</span> /path/to/compiled/bamtools/lib <span class=\"token parameter variable\">-lbamtools</span></code></pre></div>\n<p>The final flag <code class=\"language-text\">-lbamtools</code> means my <code class=\"language-text\">hello.cpp</code> code will \"link\" with bamtools, so in the compile stage, the separately compiled third-party library - bamtools - will be linked togather with my code. Each third-party library will have it's own flag, mostly it should be like \"-l[LibraryName]\".</p>\n<h2>MakeFile vs CMakeFile.txt</h2>\n<p>This are compiled object file, which is not executable, and need later to be linked. Each .cpp file will be compiled into one .o file, and then linkage process will be applied to join them.</p>\n<p>Below is an example of MakeFile to compile them all:</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">CXX <span class=\"token operator\">=</span> g++\nCXXFLAGS <span class=\"token operator\">=</span> -std<span class=\"token operator\">=</span>c++11 -Wall\n\n<span class=\"token comment\"># List of source files</span>\nSRCS <span class=\"token operator\">=</span> main.cpp math.cpp\n\n<span class=\"token comment\"># Generate object file names from source file names</span>\nOBJS <span class=\"token operator\">=</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>SRCS<span class=\"token punctuation\">:</span>.cpp<span class=\"token operator\">=</span>.o<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Executable name</span>\nTARGET <span class=\"token operator\">=</span> myprogram\n\n<span class=\"token target symbol\">all</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>\n\n<span class=\"token target symbol\"><span class=\"token variable\">$</span>(TARGET)</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CXX<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CXXFLAGS<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span> <span class=\"token variable\">$^</span>\n\n<span class=\"token comment\"># Rule to generate object files</span>\n<span class=\"token target symbol\">%.o</span><span class=\"token punctuation\">:</span> %.cpp\n    <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CXX<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CXXFLAGS<span class=\"token punctuation\">)</span> -c <span class=\"token variable\">$&lt;</span> -o <span class=\"token variable\">$@</span>\n\n<span class=\"token target symbol\">clean</span><span class=\"token punctuation\">:</span>\n    rm -f <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Below is an example of Cmake's CMakeLists.txt::</p>\n<div class=\"gatsby-highlight\" data-language=\"cmakelists.txt\"><pre class=\"language-cmakelists.txt\"><code class=\"language-cmakelists.txt\">cmake_minimum_required(VERSION 3.10)\n\nproject(MyProgram)\n\n# Set the path to the C++ compiler (g++)\nset(CMAKE_CXX_COMPILER &quot;/path/to/g++&quot;)\n\n# Add your source files\nadd_executable(myprogram main.cpp math.cpp)\n\n# Specify include directories\ntarget_include_directories(myprogram PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})</code></pre></div>\n<p>Then, the compile and run step is:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\ncmake <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span></code></pre></div>\n<p><strong>In the above comparison, it looks like cmake have a significant advantage in doing this job.</strong></p>\n<h2>A typical C++ Project Structure</h2>\n<p>Below is a typical C++ project strucuture.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">/project\n<span class=\"token operator\">|</span>-- build_and_test.sh\n<span class=\"token operator\">|</span>-- CMakeLists.txt\n<span class=\"token operator\">|</span>-- include\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- project_name\n<span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>-- header1.h\n<span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>-- header2.h\n<span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>-- <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">|</span>-- src\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- main.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- source1.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- source2.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">|</span>-- tests\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- test_main.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- test_source1.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- test_source2.cpp\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">|</span>-- build\n<span class=\"token operator\">|</span>-- bin\n<span class=\"token operator\">|</span>-- lib\n<span class=\"token operator\">|</span>-- docs\n<span class=\"token operator\">|</span>-- .gitignore</code></pre></div>\n<p>The <code class=\"language-text\">build_and_test.sh</code> would be like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># Create build directory if it doesn't exist</span>\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> build\n\n<span class=\"token comment\"># Run CMake to configure the project</span>\ncmake <span class=\"token parameter variable\">-S</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-B</span> build\n\n<span class=\"token comment\"># Build the project using make</span>\ncmake <span class=\"token parameter variable\">--build</span> build\n\n<span class=\"token comment\"># Run the tests (assuming you have a test executable)</span>\n./build/tests\n\n<span class=\"token comment\"># Run the main program (replace 'myprogram' with your actual executable name)</span>\n./build/myprogram</code></pre></div>\n<p>Well, I guess I will need to use print as the debug solution then 😄.</p>\n<h2>Syntax</h2>\n<h3>head file</h3>\n<p>head file can be used for anything, but I think a better implementation is to couple it with a cpp file, which will be compiled into .o file, and later linked with the main.cpp program. So in hte .cpp program, there are two ways to include .h file:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;something.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"something.h\"</span></span></code></pre></div>\n<p>The angle bracket should be used for 3 situations: Standard Library Headers, External Library Headers, and Compiled Object Modules. The <code class=\"language-text\">\"\"</code> will be used to find header file in this exact location.</p>","frontmatter":{"date":"December 12, 2023","slug":"/notes/Essential-C++-Knowledge","title":"Essential C++ Knowledge","tags":["C++"],"abstract":"I have not code C++ for exactly 10 years after graduation from the Department of CS. Now I need to pick it up. Here are very short records help me to pick it up."}}},"pageContext":{"slug":"/notes/Essential-C++-Knowledge"}},
    "staticQueryHashes": ["63159454"]}