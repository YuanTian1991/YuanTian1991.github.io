{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Essential-C++-Knowledge",
    "result": {"data":{"markdownRemark":{"html":"<h2>A Basic C++ Program</h2>\n<p>Firstly, below is a typical C++ program <code class=\"language-text\">hello.cpp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To compile it, I need to run the below command to compile it, then an executable software \"hello\" will appear in the folder, we can run it.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">g++ hello.cpp <span class=\"token parameter variable\">-o</span> hello</code></pre></div>\n<h2>Include Libraries</h2>\n<h3>Standard Template Library (STL)</h3>\n<p>There are two ways mostly to include libraries, one type is called STL (Standard Template Library), they are included in standard C++, there is no need to install them separately, just use them as:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Manually Compile Install Third-Party Library</h3>\n<p>Another type is specific libraries like \"Bamtools\", they are third-party libraries and installation varies. In generally, they need to be downloaded, build (compiled), then we can included them into the C++ code. Below are my actions to add <a href=\"https://github.com/pezmaster31/bamtools/wiki\">Bamtools library</a> into the C++ code.</p>\n<p>In a separate folder I run below command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/pezmaster31/bamtools.git\n\n<span class=\"token comment\"># In the top directory</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n\n<span class=\"token comment\"># Make the final compiled folder</span>\n<span class=\"token function\">mkdir</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/compiled/bamtools/\n\ncmake <span class=\"token parameter variable\">-DCMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/compiled/bamtools/ <span class=\"token punctuation\">..</span>\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>Then the final compiled bamtools would exist in the final compiled folder. In above command, <code class=\"language-text\">cmake</code> is actually a command to create Makefile, based on CMakeLists.txt, while <code class=\"language-text\">make`` is the real command for compiling, create the executable software, and </code>make install` put the lib/include files in the final compiled folder.</p>\n<p>CMake is a tool to manage building of source code. To quickly learn how to write CMakelists.txt, <a href=\"https://github.com/krux02/minimal_cmake_example\">this</a> is a good example.</p>\n<p>Anyway, now I can try include Bamtools into my hello.cpp scripts and compile it:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n\n<span class=\"token comment\">// Bamtools</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;api/BamReader.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">g++ hello.cpp <span class=\"token parameter variable\">-o</span> hello <span class=\"token parameter variable\">-I</span> /path/to//compiled/bamtools/include/bamtools <span class=\"token parameter variable\">-L</span> /path/to/compiled/bamtools/lib <span class=\"token parameter variable\">-lbamtools</span></code></pre></div>\n<p>The final flag <code class=\"language-text\">-lbamtools</code> means my <code class=\"language-text\">hello.cpp</code> code will \"link\" with bamtools, so in the compile stage, the separately compiled third-party library - bamtools - will be linked togather with my code. Each third-party library will have it's own flag, mostly it should be like \"-l[LibraryName]\".</p>","frontmatter":{"date":"December 12, 2023","slug":"/notes/Essential-C++-Knowledge","title":"Essential C++ Knowledge","tags":["C++"],"abstract":"I have not code C++ for exactly 10 years after graduation from the Department of CS. Now I need to pick it up. Here are very short records help me to pick it up."}}},"pageContext":{"slug":"/notes/Essential-C++-Knowledge"}},
    "staticQueryHashes": ["63159454"]}