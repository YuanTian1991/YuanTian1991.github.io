{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/Essential-Docker-Knowledge",
    "result": {"data":{"markdownRemark":{"html":"<p>I my <a href=\"https://yuantian1991.github.io/notes/My-Nextflow-Patterns\">another post</a>, I am working on nextflow pipeline recently. Now I want to create a docker for one process. Merely I don't expect too fancy things for this docker. It must be able to set up, integrated with nextflow, run corresponding command, return results. Also, I need to learn how to \"dig into\" docker images when it's running, otherwise I can't debug. I found some useful post like <a href=\"https://www.nextflow.io/blog/2016/docker-and-nextflow.html\">this</a>.</p>\n<h2>Create a Dockerfile</h2>\n<p>In my currently folder, I created a folder called <code class=\"language-text\">nf-docker</code>, which is used to host a various of docker to be used in a nextflow. In other word, each docker corresponding to one process in nextflow. Firstly I created a folder called <code class=\"language-text\">docker_fastp</code>, it will be used to run fastp trimming. In the folder, create a file called <code class=\"language-text\">Dockerfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Download base image ubuntu 20.04</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:20.04</span>\n\n<span class=\"token comment\"># Install wget</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span>  apt-get update <span class=\"token operator\">\\</span>\n  &amp;&amp; apt-get install -y wget <span class=\"token operator\">\\</span>\n  &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token comment\"># Install fastp in this docker</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget http://opengene.org/fastp/fastp -P usr/local/bin/ <span class=\"token operator\">\\</span>\n    &amp;&amp; chmod a+x  usr/local/bin/fastp</span></code></pre></div>\n<p>Very simple, just 3 lines, the first one use Ubuntu 20.04, the second one install wget (incredable that it's not default exist...). The third command install fastp.</p>\n<h2>Build</h2>\n<p>After writing, secondly we can build it, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> nf_fastp ./nf-docker/docker_fastp</code></pre></div>\n<p>This builds the image from the Dockerfile and assigns a tag (i.e. a name) for the image. If there are no errors, the Docker image is now in you local Docker repository ready for use. However, I prefer to have a way to find the location of this image.</p>\n<p>Below command can help to locate the build image. However, I checked it does not have much easy-readable information. Apparently Docker will \"compile\" the image in some special way.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> image inspect nf_fastp\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">..</span>.\n        <span class=\"token string\">\"GraphDriver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Data\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"LowerDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/7ec1a64b74bd7a56c4eeda28d38fc6eafd961aa5488d9c2c44a03be3efa70d7e/diff:/var/lib/docker/overlay2/2c4563a37e98864064ed310cd880edd4696df38722df14ddafe21fc694324bf6/diff\"</span>,\n                <span class=\"token string\">\"MergedDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/dd60d80847d946fed80bbd238de8c4e9bc110f92a15c69ec3998dace1a5f7a10/merged\"</span>,\n                <span class=\"token string\">\"UpperDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/dd60d80847d946fed80bbd238de8c4e9bc110f92a15c69ec3998dace1a5f7a10/diff\"</span>,\n                <span class=\"token string\">\"WorkDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/dd60d80847d946fed80bbd238de8c4e9bc110f92a15c69ec3998dace1a5f7a10/work\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"overlay2\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Another way is to type below command, it should appear on top.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> <span class=\"token comment\"># or: docker images</span>\nREPOSITORY      TAG         IMAGE ID        CREATED             SIZE\nnf_fastp        latest      7bba73a1712a    <span class=\"token number\">41</span> minutes ago      <span class=\"token number\">91</span>.3MB</code></pre></div>\n<h2>Run (Debug)</h2>\n<p>After building, below command can be used to check the internal env of docker when it's running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> nf_fastp</code></pre></div>\n<p>The <code class=\"language-text\">-it</code> parameter means <code class=\"language-text\">-interactive --tty</code>. Above command enter a terminal (root), and I know I am in the environment created by docer, with my nf_fastp image. By type <code class=\"language-text\">fastp -v</code>, I know it has been installed correctly. Durning the above command running, don't clost it, then reopen a terminal, below command shows docker now have a container running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> container <span class=\"token function\">ls</span>\nCONTAINER ID   IMAGE      COMMAND       CREATED          STATUS          PORTS     NAMES\n8ebbc21da2dd   nf_fastp   <span class=\"token string\">\"bash\"</span>        <span class=\"token number\">15</span> seconds ago   Up <span class=\"token number\">14</span> seconds             nifty_thompson</code></pre></div>\n<p>This is a very good way to debug. If I just run <code class=\"language-text\">docker run nf_fastp</code>, it will finish quite quick without any message. I guess it's because there is command assigned for the image.</p>\n<blockquote>\n<p>I normally use below command to directly start the docker, not sure if it's a good way...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker build -t nf_fastp ./nf-docker/docker_fastp &amp;&amp; docker run -it nf_fastp</code></pre></div>\n</blockquote>\n<h2>Name</h2>\n<p>In the run command, we can set <code class=\"language-text\">--name my_nf_fastp</code> to give the docker container a name. If we don't, a random one will be generated. However, we can't create container with same name, so everytime you run, the old one need to be removed as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bahs\"><pre class=\"language-bahs\"><code class=\"language-bahs\">docker rm my_nf_fastp</code></pre></div>\n<h2>ENV, WORKDIR and ENTRYPOINT</h2>\n<p>These two thigs are not must needed, but nice to have. The WORKDIR define a folder (create one if not exist) where all Run or CMD will be running. And ENV could be used to define env variable, for example path to software installed.</p>\n<p>In below example, WORKDIR is <code class=\"language-text\">/app</code>, all software will be installed in the <code class=\"language-text\">software</code> folder in this folder. Then the <code class=\"language-text\">ENV PATH \"$PATH:/app/software\"</code> is needed to export path for global usage.</p>\n<p>In terms of running, since ENTRYPOINT is defined as fastp, it can be run as <strong>docker run nf_fastp</strong>, in this case ENTRYPOINT will be automatically running, and join CMD.</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Download base image ubuntu 20.04</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:20.04</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH <span class=\"token string\">\"$PATH:/app/software\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span>  apt-get update <span class=\"token operator\">\\</span>\n  &amp;&amp; apt-get install -y wget <span class=\"token operator\">\\</span>\n  &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token comment\"># Install fastp in this docker</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget http://opengene.org/fastp/fastp -P software/ <span class=\"token operator\">\\</span>\n    &amp;&amp; chmod a+x  software/fastp</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"fastp\"</span>]</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"--help\"</span>]</span></code></pre></div>\n<p>There are some other ways to trigger action. For example, CMD is not even needed. If I remove the last two lines above, the command could be:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run nf_fastp fastp <span class=\"token parameter variable\">--help</span></code></pre></div>\n<p>The <code class=\"language-text\">docker run container</code> + <code class=\"language-text\">shell command</code> solution is prefered by me.</p>\n<h2>Files exchange between hostmachine and container &#x26;bigstar</h2>\n<p>So now I get a image with installed software, then I need to get data in it for running. Initially I thought I need <code class=\"language-text\">COPY</code> command here in docker, but after a while COPY is properly used for image building, which means it is something should be copied as a part of the docker functionality. For example, a frontend/backend of a website, a script have been written (but not argument) to be passed into it.</p>\n<p>The solution is <code class=\"language-text\">-volumn</code>. Like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> /scratch1/Tian/Cansor/Nextflow/S03_MyNextFlow/to-be-copied:/app/data nf_fastp <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> ./data/SampleSheet.csv</code></pre></div>\n<ul>\n<li>The <strong>-v /scratch1/Tian/Cansor/Nextflow/S03_MyNextFlow/to-be-copied:/app/data</strong> part is mounting the hostmachine directory to docker-image /app/data. <strong>It MUST be absolute path here.</strong></li>\n<li>The <strong>wc -l ./data/SampleSheet.csv</strong> part is a command to run inside the container.</li>\n</ul>\n<p>Similarly, we can directly export the calcualted result from docker in the <code class=\"language-text\">/data</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> /scratch1/Tian/Cansor/Nextflow/S03_MyNextFlow/to-be-copied:/app/data nf_fastp <span class=\"token function\">touch</span> ./data/whatever.txt</code></pre></div>\n<p>The <code class=\"language-text\">touch ./data/whatever.txt</code> will driectly exported to host machine.</p>\n<blockquote>\n<p>★ Note that commands like <code class=\"language-text\">echo 'Hello World' > ./data/helloworld.txt</code> can't be assigned after docker run. I did not dig too deep. but it looks like <code class=\"language-text\">></code> will be seens as hostmachine. In this case, after long time google, the solution is to pass the whole command in docker like below.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> nf_fastp ./nf-docker/docker_fastp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--rm</span>  <span class=\"token parameter variable\">-v</span> /scratch1/Tian/Cansor/Nextflow/S03_MyNextFlow/syncFolder:/app/data nf_fastp <span class=\"token function\">bash</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"echo 'Hello World' > ./data/helloworld.txt\"</span></code></pre></div>\n<h2>Docker summary</h2>\n<p>Until now, I think above are most Essential Knowledge for Docker, I can use docker eventually like a command line:</p>\n<ol>\n<li>Wrap all software, installing, setting, path .etc, even middle results in the container.</li>\n<li>Pass files, or values as parameter to execue.</li>\n<li>Finally received results in host machine.</li>\n</ol>\n<p>I think, in theory most bioinformatic analysis can be wraped into a docker like this. <strong>The fundermental principle here is that it simplised the software installation step</strong>.</p>","frontmatter":{"date":"March 10, 2022","slug":"/notes/Essential-Docker-Knowledge","title":"Essential Docker Knowledge","tags":["docker","nextflow"],"abstract":"I am working on a nextflow pipeline recently, which contains a couple of process in the pipeline. We want to use docker to run each process, so here I am writing my coding report of how to create a docker for process, run it, and collect results .etc"}}},"pageContext":{"slug":"/notes/Essential-Docker-Knowledge"}},
    "staticQueryHashes": ["63159454"]}