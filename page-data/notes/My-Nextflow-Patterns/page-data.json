{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/My-Nextflow-Patterns",
    "result": {"data":{"markdownRemark":{"html":"<h2>Input SampleSheet</h2>\n<p>Below is a simple csv file I will be used to develop the nextflow pipeline.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Barcode,file_id,end_1,end_2\nS0066,S0066,S0066_EKDL210010479-1a-AK900-7UDI293_HV7M7DSX2_L4_1.fastq,S0066_EKDL210010479-1a-AK900-7UDI293_HV7M7DSX2_L4_2.fastq\nS0067,S0067,S0067_EKDL210010479-1a-AK890-7UDI280_HV7M7DSX2_L4_1.fastq,S0067_EKDL210010479-1a-AK890-7UDI280_HV7M7DSX2_L4_2.fastq\nS0068,S0068,S0068_EKDL210010479-1a-GD06-AK845_HV7M7DSX2_L4_1.fastq,S0068_EKDL210010479-1a-GD06-AK845_HV7M7DSX2_L4_2.fastq\nS0069,S0069,S0069_EKDL210010479-1a-GG04-AK705_HV7M7DSX2_L4_1.fastq,S0069_EKDL210010479-1a-GG04-AK705_HV7M7DSX2_L4_2.fastq\nS0070,S0070,S0070_EKDL210010479-1a-7UDI300-7UDI206_HV7M7DSX2_L4_1.fastq,S0070_EKDL210010479-1a-7UDI300-7UDI206_HV7M7DSX2_L4_2.fastq</code></pre></div>\n<h2>Run Command</h2>\n<p>Save log in some place for deletion, and add resume to espace steps has done.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nextflow -log ./log/debugLog run main.nf -resume</code></pre></div>\n<h2>echo Hello World</h2>\n<p>The <code class=\"language-text\">echo true</code> is vital here, along with the echo command indeed used in below script... don't know if println works.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">process <span class=\"token string\">\"Hello World\"</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token boolean\">true</span>\n\n   <span class=\"token string\">\"\"</span>\"\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span>Debug Output<span class=\"token punctuation\">]</span> Hello World<span class=\"token operator\">!</span>\n   <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">N E X T F L O W  ~  version 21.10.6\nLaunching `main.nf` [pensive_monod] - revision: 6a534f2851\nexecutor >  local (5)\n[a3/379ccf] process > Hello World        [100%] 1 of 1, cached: 1 ✔\n[25/5d4071] process > fastp_trimming (3) [100%] 5 of 5 ✔\n[Debug Output] Hello World!</code></pre></div>\n<h2>tuple Action</h2>\n<p>tuple seems like a array of string, similar to <code class=\"language-text\">c()</code> function in R. Until now I found two ways to use it. In ths first code, map is used only to create tuple without any key. And in the process, <code class=\"language-text\">val oneFQ</code> is used to fetch each tuple. Then <code class=\"language-text\">oneFQ[0], oneFQ[1]...</code> can be used in script.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env nextflow</span>\n\nparams.fqDIR <span class=\"token operator\">=</span> <span class=\"token string\">\"../S01_SubsetFQ/subFQ/\"</span>\nparams.SampleSheet <span class=\"token operator\">=</span> <span class=\"token string\">'../S01_SubsetFQ/SampleSheet.csv'</span>\n\nsamples_ch <span class=\"token operator\">=</span> Channel.fromPath<span class=\"token punctuation\">(</span>params.SampleSheet<span class=\"token punctuation\">)</span>\n  .splitCsv<span class=\"token punctuation\">(</span>header: <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  .map<span class=\"token punctuation\">{</span> row -<span class=\"token operator\">></span> tuple<span class=\"token punctuation\">(</span>row.Barcode, row.end_1, row.end_2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\nprocess <span class=\"token string\">'test_tuple'</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token boolean\">true</span>\n    input:\n        val oneFQ from samples_ch\n    output:\n\n    script:\n        <span class=\"token string\">\"\"</span>\"\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${params.fqDIR}</span><span class=\"token variable\">${oneFQ<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>}</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${params.fqDIR}</span><span class=\"token variable\">${oneFQ<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>}</span> <span class=\"token operator\">></span> <span class=\"token function\">file</span>\n        <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In below second piece of code, I can give each value a name when I fetch them from a channel (in input part). Then the new name can be used in following script...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>. // save as above\n\nprocess <span class=\"token string\">'test_tuple'</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token boolean\">true</span>\n    input:\n        tuple sampleName, end1, end2 from samples_ch\n    output:\n\n    script:\n        <span class=\"token string\">\"\"</span>\"\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${sampleName}</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${params.fqDIR}</span><span class=\"token variable\">${end1}</span> <span class=\"token operator\">></span> <span class=\"token function\">file</span>\n        <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well...I personally don't like to create too many names. Here <code class=\"language-text\">sampleName</code>, <code class=\"language-text\">end1</code>, <code class=\"language-text\">end2</code> are created ONLY based on order of channel group. To me it's a very much not obvious declaration of a new variable name...</p>","frontmatter":{"date":"March 09, 2022","slug":"/notes/My-Nextflow-Patterns","title":"My Nextflow Patterns","tags":["nextflow"],"abstract":"I am trying to collect some nextflow pattern I will frequently use here."}}},"pageContext":{"slug":"/notes/My-Nextflow-Patterns"}},
    "staticQueryHashes": ["63159454"]}