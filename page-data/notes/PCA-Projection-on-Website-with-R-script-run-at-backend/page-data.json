{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/PCA-Projection-on-Website-with-R-script-run-at-backend",
    "result": {"data":{"markdownRemark":{"html":"<p>It's a very common and useful way to do PCA on Genomics data, which will reduce data dimentions and give user clear clustering on samples. However, PCA can also be seen as a tool similar as \"Machine Learning\", allow user to \"project\" new data onto the plot. By doing so, we can have a clear look now new clustering status between new data with old PCA plot.</p>\n<h2>1. How to PCA Projection with R?</h2>\n<p>Firstly, I need to figure out how to do PCA projection with R. Initially I found simple <code class=\"language-text\">predict</code> function can do it:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># perform principal components analysis</span>\npca <span class=\"token operator\">&lt;-</span> prcomp<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">(</span>trainData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> retx<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> center<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># project new data onto PCA plot.</span>\npred <span class=\"token operator\">&lt;-</span> predict<span class=\"token punctuation\">(</span>pca<span class=\"token punctuation\">,</span> newdata<span class=\"token operator\">=</span>t<span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Above code works, and for both <code class=\"language-text\">pca</code> and <code class=\"language-text\">pred</code>, we only want the PC1 and PC2 value for plot, like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">expl.var <span class=\"token operator\">&lt;-</span> round<span class=\"token punctuation\">(</span>pca<span class=\"token operator\">$</span>sdev<span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>sum<span class=\"token punctuation\">(</span>pca<span class=\"token operator\">$</span>sdev<span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># percent explained variance</span>\npc <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplot<span class=\"token punctuation\">(</span>pca<span class=\"token operator\">$</span>x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>pc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> col<span class=\"token operator\">=</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> cex<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> pch<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  xlab<span class=\"token operator\">=</span>paste0<span class=\"token punctuation\">(</span><span class=\"token string\">\"PC \"</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" (\"</span><span class=\"token punctuation\">,</span> expl.var<span class=\"token punctuation\">[</span>pc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ylab<span class=\"token operator\">=</span>paste0<span class=\"token punctuation\">(</span><span class=\"token string\">\"PC \"</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" (\"</span><span class=\"token punctuation\">,</span> expl.var<span class=\"token punctuation\">[</span>pc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\npoints<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>pc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> col<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> pch<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\nlegend<span class=\"token punctuation\">(</span><span class=\"token string\">\"topright\"</span><span class=\"token punctuation\">,</span> legend<span class=\"token operator\">=</span>levels<span class=\"token punctuation\">(</span>iris<span class=\"token operator\">$</span>Species<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">,</span> border<span class=\"token operator\">=</span>COLOR<span class=\"token punctuation\">)</span>\nlegend<span class=\"token punctuation\">(</span><span class=\"token string\">\"topleft\"</span><span class=\"token punctuation\">,</span> legend<span class=\"token operator\">=</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"training data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"validation data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pch<span class=\"token operator\">=</span>PCH<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>However, there is one shortage on above solution, which is the testData and trainData must be the same dimention.</strong> This is not easy in reality, somethines user will have missing value, will have rows less than origin train data. In that case, this model will not be working. So, I need another solution that allow used to predict their PCA location with slightly different data. Eventually I found the solution in <a href=\"https://stats.stackexchange.com/a/108938/359939\">this post</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># perform principal components analysis</span>\npca <span class=\"token operator\">&lt;-</span> prcomp<span class=\"token punctuation\">(</span>trainData<span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\"># project new data onto the PCA space</span>\nscale<span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">,</span> pca<span class=\"token operator\">$</span>center<span class=\"token punctuation\">,</span> pca<span class=\"token operator\">$</span>scale<span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%*%</span> pca<span class=\"token operator\">$</span>rotation </code></pre></div>\n<p>In above code, <code class=\"language-text\">pca$center</code>, <code class=\"language-text\">pca$scale</code> and <code class=\"language-text\">pca$rotation</code> are all matrix from the model <code class=\"language-text\">pca</code>, which represents the result deconvoluted from the origin training matrix. Their dimension is the same as origin training matrix, thus, if new test data have different dimention (rows) as origin training data. We just need to select common rows exist in both testData and trainData, then select corresponding sub-value and sub-matrix from <code class=\"language-text\">pca$center</code>, <code class=\"language-text\">pca$scale</code> and <code class=\"language-text\">pca$rotation</code>. Then the second equation would work.</p>\n<h2>2. Prepare Train and Test R script</h2>\n<h3>2.1. Prepare Data</h3>\n<p>Now we get the solution, it's time to put it into practice. My genomic data is TPM matrix, with each row as a gene, and each column as a sample. Like blow:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n              GCGR<span class=\"token operator\">-</span>E1     GCGR<span class=\"token operator\">-</span>E13  GCGR<span class=\"token operator\">-</span>E15     GCGR<span class=\"token operator\">-</span>E17     GCGR<span class=\"token operator\">-</span>E18\nA1BG       <span class=\"token number\">3.01154140</span>   <span class=\"token number\">0.29222439</span>  <span class=\"token number\">1.772156</span>   <span class=\"token number\">1.11747150</span>   <span class=\"token number\">0.07848974</span>\nA1BG<span class=\"token operator\">-</span>AS1   <span class=\"token number\">3.19914417</span>   <span class=\"token number\">0.08076186</span>  <span class=\"token number\">3.183502</span>   <span class=\"token number\">0.09265045</span>   <span class=\"token number\">0.13015294</span>\nA1CF       <span class=\"token number\">0.01744144</span>   <span class=\"token number\">0.03610510</span>  <span class=\"token number\">0.000000</span>   <span class=\"token number\">0.00000000</span>   <span class=\"token number\">0.00000000</span>\nA2M      <span class=\"token number\">134.62404775</span> <span class=\"token number\">670.38225565</span> <span class=\"token number\">14.909394</span> <span class=\"token number\">472.77238869</span> <span class=\"token number\">407.79533387</span>\nA2M<span class=\"token operator\">-</span>AS1    <span class=\"token number\">0.00000000</span>   <span class=\"token number\">0.23597086</span>  <span class=\"token number\">0.715507</span>   <span class=\"token number\">0.45117848</span>   <span class=\"token number\">1.14084673</span>\n<span class=\"token operator\">></span></code></pre></div>\n<p>Also, I have pd data prepared. Each row in pd file represents one sample's status. Like it's phenotype, or other attributes like Region.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> tail<span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">)</span>\n               ID Pheno      Region\n<span class=\"token number\">139</span> GCGR<span class=\"token operator\">-</span>NS18MD_A    NS     Medulla\n<span class=\"token number\">140</span> GCGR<span class=\"token operator\">-</span>NS18SC_A    NS Spinal_Cord\n<span class=\"token number\">141</span> GCGR<span class=\"token operator\">-</span>NS19CT_A    NS      Cortex\n<span class=\"token number\">142</span> GCGR<span class=\"token operator\">-</span>NS19ST_A    NS    Striatum\n<span class=\"token number\">143</span> GCGR<span class=\"token operator\">-</span>NS19ST_B    NS    Striatum\n<span class=\"token number\">144</span>   GCGR<span class=\"token operator\">-</span>NS20CT    NS      Cortex</code></pre></div>\n<h3>2.2. Training Script</h3>\n<p>Then I worte a function to automaitcally get PCA model. Note that since I eventually will deploy it online. Thus, after trianing step, I will record the PC1 and PC2 value returned from tne PCA model. They will be used to draw scatter plot online. Along with PC1 and PC2 value, phenotype information and sample ID will be converted into JSON array all at once after calculation.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span>jsonlite<span class=\"token punctuation\">)</span>\n\ngetPCA <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>DataForPCA<span class=\"token punctuation\">,</span> pd<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    zeroVaraintRowsMetastasis <span class=\"token operator\">&lt;-</span> which<span class=\"token punctuation\">(</span>apply<span class=\"token punctuation\">(</span>DataForPCA<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">(</span>zeroVaraintRowsMetastasis<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        DataForPCA <span class=\"token operator\">&lt;-</span> DataForPCA<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>zeroVaraintRowsMetastasis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    pca <span class=\"token operator\">&lt;-</span> prcomp<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">(</span>DataForPCA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> retx<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> center<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">=</span><span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Export JSON for echart scatter plot visualisation</span>\n    df <span class=\"token operator\">&lt;-</span> data.frame<span class=\"token punctuation\">(</span>ID<span class=\"token operator\">=</span>colnames<span class=\"token punctuation\">(</span>DataForPCA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PC1<span class=\"token operator\">=</span>pca<span class=\"token operator\">$</span>x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> PC2<span class=\"token operator\">=</span>pca<span class=\"token operator\">$</span>x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pd<span class=\"token punctuation\">)</span>\n    rownames<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">NULL</span>\n\n    convertedJSON <span class=\"token operator\">&lt;-</span> toJSON<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n    return<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>convertedJSON<span class=\"token operator\">=</span>convertedJSON<span class=\"token punctuation\">,</span> pcaModel<span class=\"token operator\">=</span>pca<span class=\"token punctuation\">,</span> df<span class=\"token operator\">=</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nresult <span class=\"token operator\">&lt;-</span> getPCA<span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> pd<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the result object, <code class=\"language-text\">pcaModel</code> is the PCA model we will need to used for later prediction. It need to be saved into an R object separately for loading. <code class=\"language-text\">df</code> is PCA result along with Phenotype.</p>\n<h3>2.3. Testing Script</h3>\n<p>Finally I wrote a function for Testing:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># # This script project new data onto </span>\n\nload<span class=\"token punctuation\">(</span><span class=\"token string\">\"./RScripts/PCAModel.RData\"</span><span class=\"token punctuation\">)</span>\n\ngetPred <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  rownames<span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> testData<span class=\"token operator\">$</span>GeneSymbol\n  testData <span class=\"token operator\">&lt;-</span> testData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    message<span class=\"token punctuation\">(</span><span class=\"token string\">\"Find matched gene name\"</span><span class=\"token punctuation\">)</span>\n    matchIndex <span class=\"token operator\">&lt;-</span> match<span class=\"token punctuation\">(</span>rownames<span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rownames<span class=\"token punctuation\">(</span>exampleInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    formData <span class=\"token operator\">&lt;-</span> testData<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>is.na<span class=\"token punctuation\">(</span>matchIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n\n    exampleIndex <span class=\"token operator\">&lt;-</span> matchIndex<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>is.na<span class=\"token punctuation\">(</span>matchIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    pred <span class=\"token operator\">&lt;-</span> scale<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pcaModel<span class=\"token operator\">$</span>center<span class=\"token punctuation\">[</span>exampleIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pcaModel<span class=\"token operator\">$</span>scale<span class=\"token punctuation\">[</span>exampleIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%*%</span> pcaModel<span class=\"token operator\">$</span>rotation<span class=\"token punctuation\">[</span>exampleIndex<span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n\n    df <span class=\"token operator\">&lt;-</span> data.frame<span class=\"token punctuation\">(</span>ID<span class=\"token operator\">=</span>colnames<span class=\"token punctuation\">(</span>testData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PC1<span class=\"token operator\">=</span>pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> PC2<span class=\"token operator\">=</span>pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Pheno<span class=\"token operator\">=</span><span class=\"token string\">\"your samples\"</span><span class=\"token punctuation\">,</span> Region<span class=\"token operator\">=</span><span class=\"token string\">\"your samples\"</span><span class=\"token punctuation\">)</span>\n    rownames<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">NULL</span>\n\n    return<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To be continue...</p>","frontmatter":{"date":"June 11, 2022","slug":"/notes/PCA-Projection-on-Website-with-R-script-run-at-backend","title":"PCA Projection on Website with R script run at backend","tags":["R","React","Full-Stack"],"abstract":"It is so common to draw PCA plot in Bioinformatic world. And it is cool to allow a PCA model to be able to do projection on new data onto the origin plot, thus new users will know how their new data is going to be clusteredw with old PCA plot. I managed to create a single front to backend webpage to do it online."}}},"pageContext":{"slug":"/notes/PCA-Projection-on-Website-with-R-script-run-at-backend"}},
    "staticQueryHashes": ["63159454"]}